package com.protesq.protesqpy;

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;
import android.widget.ImageButton;

public class TopicDetailActivity extends AppCompatActivity {
    private TextView contentTextView;
    private TextView titleTextView;
    private Button completeButton;
    private ProgressBar progressBar;
    private SharedPreferences prefs;
    private int position;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_topic_detail);

        ImageButton backButton = findViewById(R.id.backButton);
        titleTextView = findViewById(R.id.titleTextView);
        contentTextView = findViewById(R.id.contentTextView);
        completeButton = findViewById(R.id.completeButton);
        progressBar = findViewById(R.id.progressBar);

        backButton.setOnClickListener(v -> onBackPressed());

        prefs = getSharedPreferences("TopicProgress", MODE_PRIVATE);
        
        String title = getIntent().getStringExtra("title");
        position = getIntent().getIntExtra("position", 0);

        titleTextView.setText(title);
        setTopicContent(position);
        
        completeButton.setOnClickListener(v -> completeTopic());
        
        if (prefs.getBoolean("topic_" + position + "_completed", false)) {
            completeButton.setVisibility(View.GONE);
            progressBar.setProgress(100);
        }
    }

    @Override
    public void onBackPressed() {
        super.onBackPressed();
        overridePendingTransition(R.anim.slide_in_left, R.anim.slide_out_right);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (item.getItemId() == android.R.id.home) {
            onBackPressed();
            return true;
        }
        return super.onOptionsItemSelected(item);
    }

    private void completeTopic() {
        SharedPreferences.Editor editor = prefs.edit();
        editor.putBoolean("topic_" + position + "_completed", true);
        
        if (position < 13) {
            editor.putBoolean("topic_" + (position + 1) + "_unlocked", true);
        }
        editor.apply();

        completeButton.setVisibility(View.GONE);
        progressBar.setProgress(100);
        
        Intent resultIntent = new Intent();
        resultIntent.putExtra("topicCompleted", true);
        resultIntent.putExtra("position", position);
        setResult(RESULT_OK, resultIntent);
        
        finish();
        overridePendingTransition(R.anim.slide_in_left, R.anim.slide_out_right);
    }

    private void setTopicContent(int position) {
        String content;
        switch (position) {
            case 0: // Python'a Giri≈ü
                content = "Python'a Ho≈ü Geldiniz! üêç\n\n" +
                         "Python Nedir?\n" +
                         "Python, tƒ±pkƒ± g√ºnl√ºk konu≈üma dili gibi kolay anla≈üƒ±lƒ±r bir programlama dilidir. " +
                         "Nasƒ±l ki WhatsApp kullanmayƒ± kƒ±sa s√ºrede √∂ƒürenebiliyorsak, Python yazmayƒ± da " +
                         "o kadar kolay √∂ƒürenebiliriz.\n\n" +
                         
                         "Neden Python √ñƒürenmeliyim?\n" +
                         "‚Ä¢ Instagram, Spotify, Netflix gibi uygulamalar Python kullanƒ±yor\n" +
                         "‚Ä¢ Yapay zeka ve veri analizi i√ßin en pop√ºler dil\n" +
                         "‚Ä¢ ƒ∞≈ü bulma ≈üansƒ± √ßok y√ºksek\n" +
                         "‚Ä¢ Ba≈ülangƒ±√ß i√ßin en ideal programlama dili\n\n" +
                         
                         "Python'la Neler Yapabilirim?\n" +
                         "1. Web Siteleri (Instagram gibi)\n" +
                         "2. Oyunlar (Minecraft'ƒ±n bazƒ± kƒ±sƒ±mlarƒ± Python'la yazƒ±ldƒ±)\n" +
                         "3. Robotlar (Drone kontrol√º)\n" +
                         "4. Mobil Uygulamalar\n\n" +
                         
                         "ƒ∞lk Python Programƒ±mƒ±z:\n" +
                         "print('Merhaba D√ºnya!')\n" +
                         "# Bu kod ekrana 'Merhaba D√ºnya!' yazar\n\n" +
                         
                         "Ger√ßek Hayattan √ñrnek:\n" +
                         "# Kahve otomatƒ± programƒ±\n" +
                         "kahve_secimi = input('Hangi kahveyi istersiniz? ')\n" +
                         "print(f'Bir {kahve_secimi} hazƒ±rlanƒ±yor...')\n\n" +
                         
                         "Python'da Yorum Yazma:\n" +
                         "# Bu bir not satƒ±rƒ±dƒ±r, kod √ßalƒ±≈üƒ±rken g√∂rmezden gelinir\n" +
                         "'''\n" +
                         "Buraya uzun a√ßƒ±klamalar\n" +
                         "yazabilirsiniz\n" +
                         "'''\n\n" +
                         
                         "√ñnemli ƒ∞pu√ßlarƒ±:\n" +
                         "1. Python b√ºy√ºk/k√º√ß√ºk harfe duyarlƒ±dƒ±r (Print ‚â† print)\n" +
                         "2. Girintiler √∂nemlidir (genelde 4 bo≈üluk kullanƒ±lƒ±r)\n" +
                         "3. Her satƒ±r bir i≈ülem yapar\n\n" +
                         
                         "Pratik Yapabileceƒüiniz Yerler:\n" +
                         "‚Ä¢ replit.com (online Python edit√∂r√º)\n" +
                         "‚Ä¢ pythontutor.com (kodunuzu adƒ±m adƒ±m g√∂rebilirsiniz)\n" +
                         "‚Ä¢ codecademy.com (interaktif dersler)\n\n" +
                         
                         "Sƒ±radaki derste deƒüi≈ükenler ve veri tiplerini √∂ƒüreneceƒüiz. " +
                         "Deƒüi≈ükenleri c√ºzdanƒ±nƒ±zdaki b√∂lmeler gibi d√º≈ü√ºnebilirsiniz, " +
                         "her b√∂lmede farklƒ± ≈üeyler saklayabilirsiniz!";
                break;

            case 1: // Deƒüi≈ükenler ve Veri Tipleri
                content = "Python'da Deƒüi≈ükenler ve Veri Tipleri\n\n" +
                         "Deƒüi≈üken Tanƒ±mlama:\n" +
                         "‚Ä¢ Deƒüi≈üken isimleri harf veya _ ile ba≈ülamalƒ±dƒ±r\n" +
                         "‚Ä¢ B√ºy√ºk/k√º√ß√ºk harf duyarlƒ±dƒ±r\n" +
                         "‚Ä¢ Rakamla ba≈ülayamaz\n\n" +
                         
                         "Temel Veri Tipleri:\n" +
                         "1. Sayƒ±sal Tipler:\n" +
                         "   int (tam sayƒ±):\n" +
                         "   x = 5\n" +
                         "   y = -10\n\n" +
                         
                         "   float (ondalƒ±klƒ± sayƒ±):\n" +
                         "   pi = 3.14\n" +
                         "   fiyat = 29.99\n\n" +
                         
                         "2. Metin (String):\n" +
                         "   isim = 'Ahmet'\n" +
                         "   mesaj = \"Python √ñƒüreniyorum\"\n" +
                         "   uzun_metin = '''Bu bir\n" +
                         "   √ßok satƒ±rlƒ±\n" +
                         "   metindir'''\n\n" +
                         
                         "3. Boolean:\n" +
                         "   aktif = True\n" +
                         "   pasif = False\n\n" +
                         
                         "Tip D√∂n√º≈ü√ºmleri:\n" +
                         "sayi = int('42')      # string'den int'e\n" +
                         "metin = str(42)       # int'den string'e\n" +
                         "ondalik = float('3.14')  # string'den float'a\n\n" +
                         
                         "Deƒüi≈üken ƒ∞simlendirme √ñrnekleri:\n" +
                         "ogrenci_adi = 'Ali'     # snake_case\n" +
                         "ogrenciSayisi = 25      # camelCase\n" +
                         "MAKSIMUM_PUAN = 100     # sabitler i√ßin b√ºy√ºk harf\n\n" +
                         
                         "√áoklu Atama:\n" +
                         "x, y, z = 1, 2, 3\n" +
                         "a = b = c = 0  # aynƒ± deƒüeri birden fazla deƒüi≈ükene atama";
                break;

            case 2: // Operat√∂rler
                content = "Python'da Operat√∂rler\n\n" +
                         "1. Aritmetik Operat√∂rler:\n" +
                         "+ : Toplama\n" +
                         "- : √áƒ±karma\n" +
                         "* : √áarpma\n" +
                         "/ : B√∂lme (ondalƒ±klƒ± sonu√ß)\n" +
                         "// : Tam sayƒ± b√∂lmesi\n" +
                         "% : Mod alma\n" +
                         "** : √ús alma\n\n" +
                         
                         "√ñrnek:\n" +
                         "x = 10\n" +
                         "y = 3\n" +
                         "print(x + y)   # 13\n" +
                         "print(x / y)   # 3.3333...\n" +
                         "print(x // y)  # 3\n" +
                         "print(x % y)   # 1\n" +
                         "print(x ** 2)  # 100\n\n" +
                         
                         "2. Kar≈üƒ±la≈ütƒ±rma Operat√∂rleri:\n" +
                         "== : E≈üittir\n" +
                         "!= : E≈üit deƒüildir\n" +
                         "> : B√ºy√ºkt√ºr\n" +
                         "< : K√º√ß√ºkt√ºr\n" +
                         ">= : B√ºy√ºk e≈üittir\n" +
                         "<= : K√º√ß√ºk e≈üittir\n\n" +
                         
                         "3. Mantƒ±ksal Operat√∂rler:\n" +
                         "and : Ve\n" +
                         "or : Veya\n" +
                         "not : Deƒüil\n\n" +
                         
                         "√ñrnek:\n" +
                         "yas = 25\n" +
                         "if yas >= 18 and yas <= 30:\n" +
                         "    print('Gen√ß yeti≈ükin')\n\n" +
                         
                         "4. Atama Operat√∂rleri:\n" +
                         "+= : Topla ve ata\n" +
                         "-= : √áƒ±kar ve ata\n" +
                         "*= : √áarp ve ata\n" +
                         "/= : B√∂l ve ata\n\n" +
                         
                         "√ñrnek:\n" +
                         "x = 5\n" +
                         "x += 3  # x = x + 3\n" +
                         "print(x)  # 8";
                break;

            case 3: // D√∂ng√ºler
                content = "Python'da D√∂ng√ºler\n\n" +
                         "1. For D√∂ng√ºs√º:\n" +
                         "For d√∂ng√ºs√º, bir dizi √ºzerinde gezinmek i√ßin kullanƒ±lƒ±r.\n\n" +
                         
                         "√ñrnek:\n" +
                         "for i in range(5):\n" +
                         "    print(i)  # 0'dan 4'e kadar yazdƒ±rƒ±r\n\n" +
                         
                         "Liste √ºzerinde d√∂ng√º:\n" +
                         "meyveler = ['elma', 'armut', 'muz']\n" +
                         "for meyve in meyveler:\n" +
                         "    print(meyve)\n\n" +
                         
                         "2. While D√∂ng√ºs√º:\n" +
                         "While d√∂ng√ºs√º, bir ko≈üul doƒüru olduƒüu s√ºrece √ßalƒ±≈üƒ±r.\n\n" +
                         "√ñrnek:\n" +
                         "sayac = 0\n" +
                         "while sayac < 5:\n" +
                         "    print(sayac)\n" +
                         "    sayac += 1\n\n" +
                         
                         "3. Break ve Continue:\n" +
                         "break: D√∂ng√ºy√º sonlandƒ±rƒ±r\n" +
                         "continue: D√∂ng√ºn√ºn sonraki adƒ±mƒ±na ge√ßer\n\n" +
                         "√ñrnek:\n" +
                         "for i in range(10):\n" +
                         "    if i == 5:\n" +
                         "        break\n" +
                         "    print(i)\n\n" +
                         
                         "4. ƒ∞√ß ƒ∞√ße D√∂ng√ºler:\n" +
                         "for i in range(3):\n" +
                         "    for j in range(3):\n" +
                         "        print(f'i:{i} j:{j}')\n\n" +
                         
                         "5. Pratik √ñrnekler:\n" +
                         "# √áarpƒ±m tablosu\n" +
                         "for i in range(1, 11):\n" +
                         "    for j in range(1, 11):\n" +
                         "        print(f'{i}x{j}={i*j}')\n\n" +
                         
                         "# Yƒ±ldƒ±zlarla √º√ßgen\n" +
                         "for i in range(5):\n" +
                         "    print('*' * (i+1))\n\n" +
                         
                         "ƒ∞pu√ßlarƒ±:\n" +
                         "‚Ä¢ range(ba≈ülangƒ±√ß, biti≈ü, adƒ±m) ≈üeklinde kullanƒ±labilir\n" +
                         "‚Ä¢ enumerate() ile index ve deƒüer birlikte alƒ±nabilir\n" +
                         "‚Ä¢ zip() ile birden fazla liste √ºzerinde d√∂ng√º yapƒ±labilir";
                break;

            case 4: // Ko≈üullu ƒ∞fadeler
                content = "Python'da Ko≈üullu ƒ∞fadeler\n\n" +
                         "1. if Yapƒ±sƒ±:\n" +
                         "Temel kullanƒ±m:\n" +
                         "if kosul:\n" +
                         "    # ko≈üul doƒüruysa √ßalƒ±≈üacak kod\n\n" +
                         
                         "√ñrnek:\n" +
                         "yas = 18\n" +
                         "if yas >= 18:\n" +
                         "    print('Ehliyet alabilirsiniz')\n\n" +
                         
                         "2. if-else Yapƒ±sƒ±:\n" +
                         "if kosul:\n" +
                         "    # ko≈üul doƒüruysa\n" +
                         "else:\n" +
                         "    # ko≈üul yanlƒ±≈üsa\n\n" +
                         
                         "√ñrnek:\n" +
                         "not_degeri = 65\n" +
                         "if not_degeri >= 50:\n" +
                         "    print('Ge√ßtiniz')\n" +
                         "else:\n" +
                         "    print('Kaldƒ±nƒ±z')\n\n" +
                         
                         "3. if-elif-else Yapƒ±sƒ±:\n" +
                         "if kosul1:\n" +
                         "    # kosul1 doƒüruysa\n" +
                         "elif kosul2:\n" +
                         "    # kosul2 doƒüruysa\n" +
                         "else:\n" +
                         "    # hi√ßbiri doƒüru deƒüilse\n\n" +
                         
                         "√ñrnek:\n" +
                         "puan = 85\n" +
                         "if puan >= 90:\n" +
                         "    print('AA')\n" +
                         "elif puan >= 80:\n" +
                         "    print('BA')\n" +
                         "elif puan >= 70:\n" +
                         "    print('BB')\n" +
                         "else:\n" +
                         "    print('FF')\n\n" +
                         
                         "4. ƒ∞√ß ƒ∞√ße if Yapƒ±larƒ±:\n" +
                         "if kosul1:\n" +
                         "    if kosul2:\n" +
                         "        # her iki ko≈üul da doƒüruysa\n" +
                         "    else:\n" +
                         "        # sadece kosul1 doƒüruysa\n\n" +
                         
                         "√ñrnek:\n" +
                         "kullanici = 'admin'\n" +
                         "sifre = '1234'\n" +
                         "if kullanici == 'admin':\n" +
                         "    if sifre == '1234':\n" +
                         "        print('Giri≈ü ba≈üarƒ±lƒ±')\n" +
                         "    else:\n" +
                         "        print('≈ûifre yanlƒ±≈ü')\n" +
                         "else:\n" +
                         "    print('Kullanƒ±cƒ± bulunamadƒ±')\n\n" +
                         
                         "5. Mantƒ±ksal Operat√∂rlerle Kullanƒ±m:\n" +
                         "and: Her iki ko≈üul da doƒüru olmalƒ±\n" +
                         "or: Ko≈üullardan biri doƒüru olmalƒ±\n" +
                         "not: Ko≈üulun tersini alƒ±r\n\n" +
                         
                         "√ñrnek:\n" +
                         "yas = 25\n" +
                         "gelir = 5000\n" +
                         "if yas >= 18 and gelir >= 4000:\n" +
                         "    print('Kredi verilebilir')\n\n" +
                         
                         "6. Tek Satƒ±rlƒ±k if (Ternary Operator):\n" +
                         "sonuc = 'Ge√ßti' if not_degeri >= 50 else 'Kaldƒ±'\n\n" +
                         
                         "7. Kar≈üƒ±la≈ütƒ±rma Zincirleri:\n" +
                         "yas = 25\n" +
                         "if 18 <= yas <= 30:\n" +
                         "    print('Gen√ß yeti≈ükin')\n\n" +
                         
                         "8. None Kontrol√º:\n" +
                         "deger = None\n" +
                         "if deger is None:\n" +
                         "    print('Deƒüer atanmamƒ±≈ü')\n\n" +
                         
                         "9. Liste/String Kontrol√º:\n" +
                         "liste = [1, 2, 3]\n" +
                         "if liste:  # liste bo≈ü deƒüilse\n" +
                         "    print('Liste dolu')\n\n" +
                         
                         "10. Pratik √ñrnekler:\n" +
                         "# Hesap makinesi\n" +
                         "sayi1 = 10\n" +
                         "sayi2 = 5\n" +
                         "islem = '+'\n\n" +
                         
                         "if islem == '+':\n" +
                         "    sonuc = sayi1 + sayi2\n" +
                         "elif islem == '-':\n" +
                         "    sonuc = sayi1 - sayi2\n" +
                         "elif islem == '*':\n" +
                         "    sonuc = sayi1 * sayi2\n" +
                         "elif islem == '/':\n" +
                         "    if sayi2 != 0:\n" +
                         "        sonuc = sayi1 / sayi2\n" +
                         "    else:\n" +
                         "        sonuc = 'Sƒ±fƒ±ra b√∂l√ºnemez'\n" +
                         "else:\n" +
                         "    sonuc = 'Ge√ßersiz i≈ülem'\n\n" +
                         
                         "ƒ∞pu√ßlarƒ±:\n" +
                         "‚Ä¢ Girintilere dikkat edin (genelde 4 bo≈üluk)\n" +
                         "‚Ä¢ elif istediƒüiniz kadar kullanabilirsiniz\n" +
                         "‚Ä¢ Karma≈üƒ±k ko≈üullarda parantez kullanƒ±n\n" +
                         "‚Ä¢ Bo≈ü string, liste ve 0 False olarak deƒüerlendirilir\n" +
                         "‚Ä¢ is operat√∂r√º == yerine None kontrol√ºnde kullanƒ±lƒ±r\n\n" +
                         
                         "Yaygƒ±n Hatalar:\n" +
                         "‚Ä¢ Girintileri karƒ±≈ütƒ±rmak\n" +
                         "‚Ä¢ = (atama) ile == (e≈üitlik) karƒ±≈ütƒ±rmak\n" +
                         "‚Ä¢ elif yerine birden √ßok if kullanmak\n" +
                         "‚Ä¢ Mantƒ±ksal operat√∂rleri yanlƒ±≈ü kullanmak";
                break;

            case 5: // Listeler
                content = "Python'da Listeler üìù\n\n" +
                         "Liste Nedir?\n" +
                         "Liste, birden fazla ≈üeyi sƒ±rayla tutabileceƒüimiz bir yapƒ±dƒ±r. " +
                         "G√ºnl√ºk hayattan √∂rnekler:\n" +
                         "‚Ä¢ Alƒ±≈üveri≈ü listesi\n" +
                         "‚Ä¢ Sƒ±nƒ±f yoklama listesi\n" +
                         "‚Ä¢ Telefondaki ki≈üiler listesi\n\n" +
                         
                         "Liste Nasƒ±l Olu≈üturulur?\n" +
                         "# Bo≈ü liste olu≈üturma\n" +
                         "alisveris_listesi = []\n\n" +
                         
                         "# ƒ∞√ßi dolu liste olu≈üturma\n" +
                         "meyveler = ['elma', 'armut', 'muz']\n" +
                         "notlar = [85, 90, 75, 100]\n" +
                         "karisik = ['Ahmet', 25, True, 3.14]  # farklƒ± t√ºrde veriler olabilir\n\n" +
                         
                         "Listeye Eleman Ekleme:\n" +
                         "# append() metodu ile sona ekleme\n" +
                         "alisveris_listesi = ['ekmek', 's√ºt']\n" +
                         "alisveris_listesi.append('yumurta')\n" +
                         "print(alisveris_listesi)  # ['ekmek', 's√ºt', 'yumurta']\n\n" +
                         
                         "# insert() ile istediƒüimiz yere ekleme\n" +
                         "meyveler = ['elma', 'muz']\n" +
                         "meyveler.insert(1, 'portakal')  # 1. sƒ±raya portakal ekle\n" +
                         "print(meyveler)  # ['elma', 'portakal', 'muz']\n\n" +
                         
                         "Listeden Eleman Alma:\n" +
                         "arkadas_listesi = ['Ali', 'Ay≈üe', 'Mehmet', 'Zeynep']\n" +
                         "print(arkadas_listesi[0])     # ƒ∞lk arkada≈ü: Ali\n" +
                         "print(arkadas_listesi[-1])    # Son arkada≈ü: Zeynep\n" +
                         "print(arkadas_listesi[1:3])   # Ortadaki arkada≈ülar: ['Ay≈üe', 'Mehmet']\n\n" +
                         
                         "Ger√ßek Hayat √ñrneƒüi - Sƒ±nƒ±f Yoklamasƒ±:\n" +
                         "# Sƒ±nƒ±f listesi ve yoklama durumu\n" +
                         "sinif = ['Ali', 'Ay≈üe', 'Mehmet']\n" +
                         "gelenler = []\n\n" +
                         
                         "# Yoklama alma\n" +
                         "for ogrenci in sinif:\n" +
                         "    geldi_mi = input(f'{ogrenci} burada mƒ±? (e/h): ')\n" +
                         "    if geldi_mi == 'e':\n" +
                         "        gelenler.append(ogrenci)\n\n" +
                         
                         "# Yoklama sonucu\n" +
                         "print(f'Toplam {len(gelenler)} √∂ƒürenci geldi')\n\n" +
                         
                         "Listede Deƒüi≈üiklik Yapma:\n" +
                         "# Liste elemanƒ±nƒ± deƒüi≈ütirme\n" +
                         "notlar = [85, 70, 90]\n" +
                         "notlar[1] = 75  # 70 yerine 75 yaz\n\n" +
                         
                         "# Listeden eleman silme\n" +
                         "meyveler = ['elma', 'armut', 'muz']\n" +
                         "meyveler.remove('armut')  # armut'u sil\n" +
                         "print(meyveler)  # ['elma', 'muz']\n\n" +
                         
                         "# Son elemanƒ± silme\n" +
                         "son_meyve = meyveler.pop()\n" +
                         "print(son_meyve)  # muz\n\n" +
                         
                         "Faydalƒ± Liste ƒ∞≈ülemleri:\n" +
                         "sayilar = [5, 2, 8, 1, 9]\n" +
                         "sayilar.sort()           # K√º√ß√ºkten b√ºy√ºƒüe sƒ±rala\n" +
                         "print(min(sayilar))      # En k√º√ß√ºk sayƒ±: 1\n" +
                         "print(max(sayilar))      # En b√ºy√ºk sayƒ±: 9\n" +
                         "print(len(sayilar))      # Liste uzunluƒüu: 5\n" +
                         "print(sum(sayilar))      # Toplam: 25\n\n" +
                         
                         "Pratik Yapabileceƒüiniz √ñrnek:\n" +
                         "# To-Do List uygulamasƒ±\n" +
                         "yapilacaklar = []\n\n" +
                         
                         "# Yeni g√∂rev ekleme\n" +
                         "yeni_gorev = '√ñdev yap'\n" +
                         "yapilacaklar.append(yeni_gorev)\n\n" +
                         
                         "# G√∂revi tamamlama\n" +
                         "tamamlanan = yapilacaklar.pop(0)\n" +
                         "print(f'Tamamlanan g√∂rev: {tamamlanan}')\n\n" +
                         
                         "ƒ∞pu√ßlarƒ±:\n" +
                         "‚Ä¢ Liste indeksleri 0'dan ba≈ülar\n" +
                         "‚Ä¢ Listeler deƒüi≈ütirilebilir (mutable)\n" +
                         "‚Ä¢ Listeleri i√ß i√ße kullanabilirsiniz\n" +
                         "‚Ä¢ Liste metodlarƒ±nƒ± g√∂rmek i√ßin dir(list) kullanƒ±n\n\n" +
                         
                         "Alƒ±≈ütƒ±rma:\n" +
                         "1. Kendi alƒ±≈üveri≈ü listenizi olu≈üturun\n" +
                         "2. Listeye yeni √ºr√ºnler ekleyin\n" +
                         "3. Aldƒ±ƒüƒ±nƒ±z √ºr√ºnleri listeden silin\n" +
                         "4. Ka√ß √ºr√ºn kaldƒ±ƒüƒ±nƒ± g√∂sterin";
                break;

            case 6: // Diziler
                content = "Python'da Diziler (Arrays)\n\n" +
                         "NumPy k√ºt√ºphanesi ile diziler olu≈üturulur.\n\n" +
                         
                         "1. Dizi Olu≈üturma:\n" +
                         "import numpy as np\n\n" +
                         "# Basit dizi\n" +
                         "arr = np.array([1, 2, 3, 4, 5])\n\n" +
                         "# Sƒ±fƒ±rlardan olu≈üan dizi\n" +
                         "zeros = np.zeros(5)\n\n" +
                         "# Birlerden olu≈üan dizi\n" +
                         "ones = np.ones(5)\n\n" +
                         
                         "2. √áok Boyutlu Diziler:\n" +
                         "# 2x3 matris\n" +
                         "matrix = np.array([[1, 2, 3],\n" +
                         "                   [4, 5, 6]])\n\n" +
                         
                         "3. Dizi ƒ∞≈ülemleri:\n" +
                         "# Toplama\n" +
                         "arr + 5  # Her elemana 5 ekler\n\n" +
                         "# √áarpma\n" +
                         "arr * 2  # Her elemanƒ± 2 ile √ßarpar\n\n" +
                         "# Kar≈üƒ±la≈ütƒ±rma\n" +
                         "arr > 3  # 3'ten b√ºy√ºk elemanlarƒ± bulur\n\n" +
                         
                         "4. Dizi Dilimleme:\n" +
                         "arr[1:4]  # 1. indeksten 4. indekse kadar\n" +
                         "arr[::2]  # ƒ∞ki≈üer atlayarak\n\n" +
                         
                         "5. Dizi Metodlarƒ±:\n" +
                         "arr.sum()  # Toplam\n" +
                         "arr.mean()  # Ortalama\n" +
                         "arr.max()  # En b√ºy√ºk deƒüer\n" +
                         "arr.min()  # En k√º√ß√ºk deƒüer\n\n" +
                         
                         "6. ≈ûekil Deƒüi≈ütirme:\n" +
                         "arr.reshape(2, 3)  # 2x3 matrise d√∂n√º≈üt√ºr√ºr\n\n" +
                         
                         "7. Pratik √ñrnekler:\n" +
                         "# Rastgele sayƒ±lardan olu≈üan dizi\n" +
                         "random_arr = np.random.rand(5)\n\n" +
                         "# Belirli aralƒ±kta sayƒ±lar\n" +
                         "range_arr = np.arange(0, 10, 2)\n\n" +
                         
                         "ƒ∞pu√ßlarƒ±:\n" +
                         "‚Ä¢ NumPy dizileri liste ve matrislerden daha hƒ±zlƒ±dƒ±r\n" +
                         "‚Ä¢ Bilimsel hesaplamalar i√ßin idealdir\n" +
                         "‚Ä¢ Veri analizi i√ßin pandas ile birlikte kullanƒ±lƒ±r";
                break;

            case 7: // Demetler (Tuples)
                content = "Python'da Demetler (Tuples)\n\n" +
                         "Demet Olu≈üturma:\n" +
                         "demet = ()  # bo≈ü demet\n" +
                         "sayilar = (1, 2, 3)\n" +
                         "tek_elemanli = (1,)  # virg√ºl √∂nemli!\n\n" +
                         
                         "Demet √ñzellikleri:\n" +
                         "1. Deƒüi≈ütirilemezlik:\n" +
                         "‚Ä¢ Elemanlar deƒüi≈ütirilemez\n" +
                         "‚Ä¢ Eleman eklenemez/silinemez\n" +
                         "‚Ä¢ Performans avantajƒ± saƒülar\n\n" +
                         
                         "2. Elemanlara Eri≈üim:\n" +
                         "demet[0]    # ilk eleman\n" +
                         "demet[-1]   # son eleman\n" +
                         "demet[1:3]  # dilimleme\n\n" +
                         
                         "3. Demet Metodlarƒ±:\n" +
                         "count(): Eleman sayƒ±sƒ±nƒ± verir\n" +
                         "index(): Elemanƒ±n indeksini verir\n\n" +
                         
                         "√ñrnek:\n" +
                         "koordinat = (40.7128, -74.0060)\n" +
                         "x, y = koordinat  # √ßoklu atama\n" +
                         "print(f'X: {x}, Y: {y}')\n\n" +
                         
                         "4. Demet Kullanƒ±m Alanlarƒ±:\n" +
                         "‚Ä¢ Deƒüi≈ümez veri gruplarƒ±\n" +
                         "‚Ä¢ Fonksiyon d√∂n√º≈ü deƒüerleri\n" +
                         "‚Ä¢ S√∂zl√ºk anahtarlarƒ±\n\n" +
                         
                         "5. Liste ve Demet Kar≈üƒ±la≈ütƒ±rmasƒ±:\n" +
                         "‚Ä¢ Demetler daha az bellek kullanƒ±r\n" +
                         "‚Ä¢ Demetler daha hƒ±zlƒ± i≈ülenir\n" +
                         "‚Ä¢ Listeler esnektir ama demetler g√ºvenlidir";
                break;

            case 8: // K√ºmeler (Sets)
                content = "Python'da K√ºmeler (Sets)\n\n" +
                         "K√ºme Olu≈üturma:\n" +
                         "kume = set()  # bo≈ü k√ºme\n" +
                         "sayilar = {1, 2, 3, 4, 5}\n" +
                         "meyveler = {'elma', 'armut', 'muz'}\n\n" +
                         
                         "K√ºme √ñzellikleri:\n" +
                         "1. Benzersizlik:\n" +
                         "‚Ä¢ Her eleman benzersizdir\n" +
                         "‚Ä¢ Tekrar eden elemanlar otomatik silinir\n\n" +
                         
                         "2. Sƒ±rasƒ±zlƒ±k:\n" +
                         "‚Ä¢ Elemanlar sƒ±ralƒ± deƒüildir\n" +
                         "‚Ä¢ ƒ∞ndeks ile eri≈üilemez\n\n" +
                         
                         "3. K√ºme ƒ∞≈ülemleri:\n" +
                         "union(): Birle≈üim\n" +
                         "intersection(): Kesi≈üim\n" +
                         "difference(): Fark\n" +
                         "symmetric_difference(): Simetrik fark\n\n" +
                         
                         "√ñrnek:\n" +
                         "A = {1, 2, 3, 4}\n" +
                         "B = {3, 4, 5, 6}\n" +
                         "print(A | B)  # Birle≈üim\n" +
                         "print(A & B)  # Kesi≈üim\n" +
                         "print(A - B)  # Fark\n\n" +
                         
                         "4. K√ºme Metodlarƒ±:\n" +
                         "add(): Eleman ekler\n" +
                         "remove(): Eleman siler\n" +
                         "discard(): G√ºvenli silme\n" +
                         "clear(): T√ºm k√ºmeyi temizler\n\n" +
                         
                         "5. K√ºme Kontrolleri:\n" +
                         "issubset(): Alt k√ºme kontrol√º\n" +
                         "issuperset(): √úst k√ºme kontrol√º\n" +
                         "isdisjoint(): Ayrƒ±k k√ºme kontrol√º";
                break;

            case 9: // Fonksiyonlar
                content = "Python'da Fonksiyonlar\n\n" +
                         "Fonksiyon Tanƒ±mlama:\n" +
                         "def fonksiyon_adi(parametre1, parametre2):\n" +
                         "    # fonksiyon g√∂vdesi\n" +
                         "    return sonuc\n\n" +
                         
                         "1. Temel Fonksiyon Yapƒ±sƒ±:\n" +
                         "def selamla(isim):\n" +
                         "    return f'Merhaba {isim}!'\n\n" +
                         "print(selamla('Ahmet'))\n\n" +
                         
                         "2. Parametre T√ºrleri:\n" +
                         "‚Ä¢ Zorunlu parametreler\n" +
                         "‚Ä¢ Varsayƒ±lan deƒüerli parametreler\n" +
                         "‚Ä¢ Anahtar kelimeli parametreler\n" +
                         "‚Ä¢ Deƒüi≈üken sayƒ±da parametreler\n\n" +
                         
                         "√ñrnek:\n" +
                         "def topla(a, b=0, *args, **kwargs):\n" +
                         "    toplam = a + b\n" +
                         "    for sayi in args:\n" +
                         "        toplam += sayi\n" +
                         "    return toplam\n\n" +
                         
                         "3. Lambda Fonksiyonlarƒ±:\n" +
                         "kare = lambda x: x**2\n" +
                         "print(kare(5))  # 25\n\n" +
                         
                         "4. Fonksiyon Dok√ºmantasyonu:\n" +
                         "def ustel(taban, us):\n" +
                         "    '''Bu fonksiyon √ºs alma i≈ülemi yapar'''\n" +
                         "    return taban ** us\n\n" +
                         
                         "5. Global ve Yerel Deƒüi≈ükenler:\n" +
                         "x = 10  # global\n" +
                         "def fonksiyon():\n" +
                         "    global x\n" +
                         "    x = 20  # global x'i deƒüi≈ütirir\n\n" +
                         
                         "6. Recursive (√ñzyinelemeli) Fonksiyonlar:\n" +
                         "def faktoriyel(n):\n" +
                         "    if n <= 1:\n" +
                         "        return 1\n" +
                         "    return n * faktoriyel(n-1)";
                break;

            case 10: // Mod√ºller
                content = "Python'da Mod√ºller\n\n" +
                         "Mod√ºl Kullanƒ±mƒ±:\n" +
                         "import modul_adi\n" +
                         "from modul_adi import fonksiyon\n\n" +
                         
                         "1. Standart Mod√ºller:\n" +
                         "import math\n" +
                         "print(math.pi)  # 3.141592...\n" +
                         "print(math.sqrt(16))  # 4.0\n\n" +
                         
                         "import random\n" +
                         "print(random.randint(1, 10))\n\n" +
                         
                         "2. Mod√ºl ƒ∞simlendirme:\n" +
                         "import math as m\n" +
                         "print(m.pi)\n\n" +
                         
                         "3. Se√ßili ƒ∞√ße Aktarma:\n" +
                         "from math import pi, sqrt\n" +
                         "print(sqrt(25))  # 5.0\n\n" +
                         
                         "4. T√ºm ƒ∞√ßeriƒüi ƒ∞√ße Aktarma:\n" +
                         "from math import *  # √∂nerilmez\n\n" +
                         
                         "5. √ñnemli Standart Mod√ºller:\n" +
                         "‚Ä¢ os: ƒ∞≈ületim sistemi i≈ülemleri\n" +
                         "‚Ä¢ sys: Sistem √∂zellikleri\n" +
                         "‚Ä¢ datetime: Tarih ve zaman i≈ülemleri\n" +
                         "‚Ä¢ json: JSON i≈ülemleri\n" +
                         "‚Ä¢ re: Regular expressions\n\n" +
                         
                         "6. Kendi Mod√ºl√ºn√º Olu≈üturma:\n" +
                         "# hesap.py\n" +
                         "def topla(a, b):\n" +
                         "    return a + b\n\n" +
                         "# main.py\n" +
                         "import hesap\n" +
                         "print(hesap.topla(5, 3))";
                break;

            case 11: // Dosya ƒ∞≈ülemleri
                content = "Python'da Dosya ƒ∞≈ülemleri\n\n" +
                         "Dosya A√ßma Modlarƒ±:\n" +
                         "'r': Okuma modu\n" +
                         "'w': Yazma modu\n" +
                         "'a': Ekleme modu\n" +
                         "'r+': Okuma ve yazma\n\n" +
                         
                         "1. Dosya Okuma:\n" +
                         "with open('dosya.txt', 'r') as f:\n" +
                         "    icerik = f.read()\n" +
                         "    print(icerik)\n\n" +
                         
                         "2. Satƒ±r Satƒ±r Okuma:\n" +
                         "with open('dosya.txt', 'r') as f:\n" +
                         "    for satir in f:\n" +
                         "        print(satir)\n\n" +
                         
                         "3. Dosyaya Yazma:\n" +
                         "with open('yeni.txt', 'w') as f:\n" +
                         "    f.write('Merhaba D√ºnya!')\n\n" +
                         
                         "4. Dosyaya Ekleme:\n" +
                         "with open('dosya.txt', 'a') as f:\n" +
                         "    f.write('\\nYeni satƒ±r')\n\n" +
                         
                         "5. Dosya Kontrolleri:\n" +
                         "import os\n" +
                         "os.path.exists('dosya.txt')  # dosya var mƒ±?\n" +
                         "os.remove('dosya.txt')      # dosya silme\n\n" +
                         
                         "6. CSV Dosyalarƒ±:\n" +
                         "import csv\n" +
                         "with open('veri.csv', 'r') as f:\n" +
                         "    okuyucu = csv.reader(f)\n" +
                         "    for satir in okuyucu:\n" +
                         "        print(satir)\n\n" +
                         
                         "7. JSON Dosyalarƒ±:\n" +
                         "import json\n" +
                         "data = {'ad': 'Ali', 'yas': 25}\n" +
                         "with open('veri.json', 'w') as f:\n" +
                         "    json.dump(data, f)";
                break;

            case 12: // Input/Output
                content = "Python'da Input/Output ƒ∞≈ülemleri\n\n" +
                         "1. Kullanƒ±cƒ±dan Veri Alma:\n" +
                         "isim = input('ƒ∞sminiz: ')\n" +
                         "yas = int(input('Ya≈üƒ±nƒ±z: '))\n\n" +
                         
                         "2. Ekrana Yazdƒ±rma:\n" +
                         "print('Merhaba D√ºnya!')\n" +
                         "print('Sayƒ±:', 42)\n\n" +
                         
                         "3. Formatlƒ± Yazdƒ±rma:\n" +
                         "ad = 'Ali'\n" +
                         "yas = 25\n" +
                         "print(f'{ad} {yas} ya≈üƒ±nda')\n" +
                         "print('{} {} ya≈üƒ±nda'.format(ad, yas))\n\n" +
                         
                         "4. Print Parametreleri:\n" +
                         "print('A', 'B', sep='-')  # A-B\n" +
                         "print('X', end='')  # satƒ±r sonu yok\n\n" +
                         
                         "5. √ñzel Karakterler:\n" +
                         "\\n: Yeni satƒ±r\n" +
                         "\\t: Tab\n" +
                         "\\': Tek tƒ±rnak\n" +
                         "\\\": √áift tƒ±rnak\n\n" +
                         
                         "6. Sayƒ± Formatlarƒ±:\n" +
                         "sayi = 42\n" +
                         "print(f'{sayi:03d}')  # 042\n" +
                         "pi = 3.14159\n" +
                         "print(f'{pi:.2f}')  # 3.14\n\n" +
                         
                         "7. Hizalama:\n" +
                         "text = 'Python'\n" +
                         "print(f'{text:>10}')  # saƒüa yasla\n" +
                         "print(f'{text:<10}')  # sola yasla\n" +
                         "print(f'{text:^10}')  # ortala";
                break;

            case 13: // Mini Proje
                content = "Python Mini Proje: Basit Not Defteri\n\n" +
                         "Bu projede √∂ƒürendiƒüimiz konularƒ± kullanarak\n" +
                         "basit bir not defteri uygulamasƒ± yapacaƒüƒ±z.\n\n" +
                         
                         "1. Proje Yapƒ±sƒ±:\n" +
                         "# notlar.py\n" +
                         "class NotDefteri:\n" +
                         "    def __init__(self):\n" +
                         "        self.notlar = {}\n\n" +
                         "    def not_ekle(self, baslik, icerik):\n" +
                         "        self.notlar[baslik] = icerik\n\n" +
                         "    def not_sil(self, baslik):\n" +
                         "        if baslik in self.notlar:\n" +
                         "            del self.notlar[baslik]\n\n" +
                         "    def notlari_goster(self):\n" +
                         "        for baslik, icerik in self.notlar.items():\n" +
                         "            print(f'\\n{baslik}:\\n{icerik}')\n\n" +
                         
                         "2. Ana Program:\n" +
                         "def main():\n" +
                         "    defterim = NotDefteri()\n" +
                         "    while True:\n" +
                         "        print('\\n1. Not Ekle')\n" +
                         "        print('2. Notlarƒ± G√∂ster')\n" +
                         "        print('3. Not Sil')\n" +
                         "        print('4. √áƒ±kƒ±≈ü')\n" +
                         "        secim = input('Se√ßiminiz: ')\n\n" +
                         "        if secim == '1':\n" +
                         "            baslik = input('Ba≈ülƒ±k: ')\n" +
                         "            icerik = input('ƒ∞√ßerik: ')\n" +
                         "            defterim.not_ekle(baslik, icerik)\n" +
                         "        elif secim == '2':\n" +
                         "            defterim.notlari_goster()\n" +
                         "        elif secim == '3':\n" +
                         "            baslik = input('Silinecek not ba≈ülƒ±ƒüƒ±: ')\n" +
                         "            defterim.not_sil(baslik)\n" +
                         "        elif secim == '4':\n" +
                         "            break\n\n" +
                         
                         "if __name__ == '__main__':\n" +
                         "    main()\n\n" +
                         
                         "Bu proje ≈üunlarƒ± i√ßerir:\n" +
                         "‚Ä¢ Sƒ±nƒ±f yapƒ±sƒ±\n" +
                         "‚Ä¢ S√∂zl√ºk kullanƒ±mƒ±\n" +
                         "‚Ä¢ D√∂ng√ºler ve ko≈üullar\n" +
                         "‚Ä¢ Fonksiyonlar\n" +
                         "‚Ä¢ Kullanƒ±cƒ± giri≈üi\n" +
                         "‚Ä¢ Mod√ºl yapƒ±sƒ±";
                break;

            default:
                content = "ƒ∞√ßerik bulunamadƒ±.";
        }
        contentTextView.setText(content);
    }
} 